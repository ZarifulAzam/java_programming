
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author zarif
 */
public class question_paper_temp extends javax.swing.JFrame {

    /**
     * Creates new form question_paper_temp
     */
    Connection con = null;
    Statement stmt = null;
    PreparedStatement pst = null;
    ResultSet rs = null;
    String user_id = "";
    int quesCounter = 1;
    int examid = 1;

    public question_paper_temp(String resultuid) {
        initComponents();        
        this.user_id = resultuid;        
        questionLoad(quesCounter);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Questions = new javax.swing.JLabel();
        Opt1 = new javax.swing.JRadioButton();
        Opt2 = new javax.swing.JRadioButton();
        Opt3 = new javax.swing.JRadioButton();
        Opt4 = new javax.swing.JRadioButton();
        nextBTN = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Questions.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        Questions.setText("This is question 01");

        Opt1.setText("Option 01");
        Opt1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Opt1ActionPerformed(evt);
            }
        });

        Opt2.setText("Option 02");
        Opt2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Opt2ActionPerformed(evt);
            }
        });

        Opt3.setText("Option 03");
        Opt3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Opt3ActionPerformed(evt);
            }
        });

        Opt4.setText("Option 04");
        Opt4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Opt4ActionPerformed(evt);
            }
        });

        nextBTN.setText("Submit and Next");
        nextBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextBTNActionPerformed(evt);
            }
        });

        jButton1.setText("Back");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(93, 93, 93)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(Questions, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 295, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(Opt3, javax.swing.GroupLayout.DEFAULT_SIZE, 121, Short.MAX_VALUE)
                            .addComponent(Opt1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(Opt4, javax.swing.GroupLayout.DEFAULT_SIZE, 103, Short.MAX_VALUE)
                            .addComponent(Opt2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(nextBTN, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(92, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addComponent(Questions, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Opt1)
                    .addComponent(Opt2))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Opt4)
                    .addComponent(Opt3))
                .addGap(30, 30, 30)
                .addComponent(nextBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(64, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void nextBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextBTNActionPerformed
        DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy/MM/dd HH:mm:ss");
        LocalDateTime now = LocalDateTime.now();

        try {
            con = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE", "Zarif", "1967");
            stmt = con.createStatement();
            rs = stmt.executeQuery("select count(id) AS totalq from q_bank");
            int totques = 0;
            while (rs.next()) {
                totques = rs.getInt("totalq");
            }

            if (quesCounter > totques) {

            } else {

                int ans = 0;
                if (Opt1.isSelected()) {
                    ans = 1;
                }
                if (Opt2.isSelected()) {
                    ans = 2;
                }
                if (Opt3.isSelected()) {
                    ans = 3;
                }
                if (Opt4.isSelected()) {
                    ans = 4;
                }

                if (quesCounter == 1) {
                    stmt = con.createStatement();
                    rs = stmt.executeQuery("select MAX(id) AS maxid from answersheet");
                    int maxid = 1;

                    while (rs.next()) {
                        maxid += rs.getInt("maxid");
                    }
                    stmt = null;

                    examid = maxid;

                    pst = con.prepareStatement("insert into answersheet (id,user_id,total_marks,user_marks,submit_date) values(?,?,?,?,?)");
                    pst.setInt(1, examid);
                    pst.setString(2, this.user_id);
                    pst.setInt(3, 0);
                    pst.setInt(4, 0);
                    pst.setString(5, dtf.format(now));
                    pst.executeUpdate();
                    pst = null;
                }

                stmt = con.createStatement();
                rs = stmt.executeQuery("select user_marks from answersheet where id=" + examid);
                int last_usermarks = 0;
                while (rs.next()) {
                    last_usermarks = rs.getInt("user_marks");
                }
                stmt = null;

                stmt = con.createStatement();
                rs = stmt.executeQuery("select * from q_bank where id =" + quesCounter + "");

                int correct = 0;
                while (rs.next()) {
                    correct = rs.getInt("correct_ans");
                }
                if (ans == correct) {
                    last_usermarks++;
                }

                //System.out.println(ans);
                //System.out.println(correct);
                //System.out.println(last_usermarks);
                stmt = null;

                pst = con.prepareStatement("update answersheet set total_marks=?,user_marks=?,submit_date=? where id=?");
                pst.setInt(1, quesCounter);
                pst.setInt(2, last_usermarks);
                pst.setString(3, dtf.format(now));
                pst.setInt(4, examid);
                pst.executeUpdate();
                pst = null;

                stmt = con.createStatement();
                rs = stmt.executeQuery("select MAX(id) AS maxid from answersheetchild");
                int maxchildid = 1;
                while (rs.next()) {
                    maxchildid += rs.getInt("maxid");
                }
                stmt = null;

                pst = con.prepareStatement("insert into answersheetchild (id,answersheetid,answer,canswer,question_id) values(?,?,?,?,?)");
                pst.setInt(1, maxchildid);
                pst.setInt(2, examid);
                pst.setInt(3, ans);
                pst.setInt(4, correct);
                pst.setInt(5, quesCounter);
                pst.execute();
                pst = null;

                quesCounter++;
                if (quesCounter <= totques) {
                    questionLoad(quesCounter);
                } else {
                    JOptionPane.showMessageDialog(null, "Total Marks:" + totques + " Your Marks:" + last_usermarks);
                    this.dispose();
                    new Final_message(quesCounter,totques,this.user_id).setVisible(true);
                }

                if (quesCounter == totques) {
                    nextBTN.setText("Final Submit");
                    

                }

            }
        } catch (SQLException ex) {
            Logger.getLogger(question_paper_temp.class.getName()).log(Level.SEVERE, null, ex);
        }
        Opt1.setSelected(false);
        Opt2.setSelected(false);
        Opt3.setSelected(false);
        Opt4.setSelected(false);
    }//GEN-LAST:event_nextBTNActionPerformed

    private void Opt1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Opt1ActionPerformed
        Opt2.setSelected(false);
        Opt3.setSelected(false);
        Opt4.setSelected(false);
    }//GEN-LAST:event_Opt1ActionPerformed

    private void Opt2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Opt2ActionPerformed
        Opt1.setSelected(false);
        Opt3.setSelected(false);
        Opt4.setSelected(false);
    }//GEN-LAST:event_Opt2ActionPerformed

    private void Opt3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Opt3ActionPerformed
        Opt1.setSelected(false);
        Opt2.setSelected(false);
        Opt4.setSelected(false);
    }//GEN-LAST:event_Opt3ActionPerformed

    private void Opt4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Opt4ActionPerformed
        Opt1.setSelected(false);
        Opt2.setSelected(false);
        Opt3.setSelected(false);
    }//GEN-LAST:event_Opt4ActionPerformed

    private void questionLoad(int qid) {
        //System.out.println(qid);
        int quesid = qid;
        String que = "";
        String ans1 = "";
        String ans2 = "";
        String ans3 = "";
        String ans4 = "";
        String corr = "";
        try {
            con = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE", "Zarif", "1967");
            stmt = con.createStatement();
            rs = stmt.executeQuery("select * from q_bank where id=" + qid);

            while (rs.next()) {
                quesid = rs.getInt("id");
                // String s=Integer.toString(Id);
                que = rs.getString("question");
                ans1 = rs.getString("ans1");
                ans2 = rs.getString("ans2");
                ans3 = rs.getString("ans3");
                ans4 = rs.getString("ans4");
                corr = rs.getString("correct_ans");
            }
        } catch (SQLException ex) {
            Logger.getLogger(question_paper_temp.class.getName()).log(Level.SEVERE, null, ex);
        }

        Questions.setText(que);
        Opt1.setText(ans1);
        Opt2.setText(ans2);
        Opt3.setText(ans3);
        Opt4.setText(ans4);
    }

    private void countTotalQuestion() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    /**
     * @param args the command line arguments
     */
   

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton Opt1;
    private javax.swing.JRadioButton Opt2;
    private javax.swing.JRadioButton Opt3;
    private javax.swing.JRadioButton Opt4;
    private javax.swing.JLabel Questions;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton nextBTN;
    // End of variables declaration//GEN-END:variables

}
